{
	"name": "S3_Copy_Inventory_Dimension_Data_To_Staging",
	"properties": {
		"activities": [
			{
				"name": "Fetch Last Extract Date",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select FORMAT(max(ExtractDateTime),'yyyy-MM-ddTHH:mm:ssZ')as LastSuccessfulExtractDate\nfrom ExtractLog\nwhere ExtractResult = 'Success'\nand ExtractType = 'InventoryDimension'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Customer_Staging",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Set Last Extract Date",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Fetch Last Extract Date",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "LastExtractDate",
					"value": {
						"value": "@{convertFromUtc(activity('Fetch Last Extract Date').output.firstRow.LastSuccessfulExtractDate,'GMT Standard Time')}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Create Extract Log Entry",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set Last Extract Date",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "insert ExtractLog \nvalues(getdate(),'InventoryDimension','Started',getdate());\nselect SCOPE_IDENTITY() as logRecord",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Customer_Staging",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Update Extract Log Entry",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Update ExtractLog with Latest UpdateDate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "update ExtractLog \nset ExtractResult = 'Success',\nLastUpdatedDate = getdate()\nwhere logid = @{activity('Create Extract Log Entry').output.firstRow.logRecord};\n\nselect 0 res",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Customer_Staging",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "If New InventoryType Data",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Check New InventoryType Data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(activity('Check New InventoryType Data').output.firstRow.ct,0)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Copy All Inventory Type Data",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "MySqlSource",
									"query": {
										"value": "select ID,\n    Inventory_Type,\n    Description,\n    last_updated\nfrom inventorytypes \nwhere last_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}'\n",
										"type": "Expression"
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "upsert",
									"upsertSettings": {
										"useTempDB": true,
										"keys": [
											"Inventory_Type"
										]
									},
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"name": "ID",
												"type": "String"
											},
											"sink": {
												"name": "ID",
												"type": "String",
												"physicalType": "varchar"
											}
										},
										{
											"source": {
												"name": "Description",
												"type": "String"
											},
											"sink": {
												"name": "Description",
												"type": "String",
												"physicalType": "varchar"
											}
										},
										{
											"source": {
												"name": "Inventory_Type",
												"type": "String"
											},
											"sink": {
												"name": "Inventory_Type",
												"type": "String",
												"physicalType": "varchar"
											}
										},
										{
											"source": {
												"name": "last_updated",
												"type": "DateTime"
											},
											"sink": {
												"name": "last_updated",
												"type": "DateTime",
												"physicalType": "datetime"
											}
										}
									],
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "OperationalDB",
									"type": "DatasetReference",
									"parameters": {
										"ConnectionStringKey": {
											"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
											"type": "Expression"
										},
										"KeyVault_URL": {
											"value": "@pipeline().parameters.KeyVault_URL",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "InventoryType_Staging",
									"type": "DatasetReference",
									"parameters": {
										"ConnectionStringKey": {
											"value": "@pipeline().parameters.StagingDBConnectionStringKey",
											"type": "Expression"
										},
										"KeyVault_URL": {
											"value": "@pipeline().parameters.KeyVault_URL",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Check New InventoryType Data",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Create Extract Log Entry",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "MySqlSource",
						"query": {
							"value": "select count(1) as ct \nfrom inventorytypes\nwhere last_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}'\n",
							"type": "Expression"
						}
					},
					"dataset": {
						"referenceName": "OperationalDB",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Check New StockLedgerTransactionType Data",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Create Extract Log Entry",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "MySqlSource",
						"query": {
							"value": "select count(1) as ct \nfrom stockledgertransactiontypes\nwhere last_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}'",
							"type": "Expression"
						}
					},
					"dataset": {
						"referenceName": "OperationalDB",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "If New StockLedgerTransaction Data",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Check New StockLedgerTransactionType Data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(activity('Check New StockLedgerTransactionType Data').output.firstRow.ct,0)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Copy All StockledgerTrTypes Data",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "MySqlSource",
									"query": {
										"value": "select Transaction_Type,\nDescription,\nData_Type_Id,\nlast_updated\nfrom stockledgertransactiontypes \nwhere last_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "upsert",
									"upsertSettings": {
										"useTempDB": true,
										"keys": [
											"Transaction_Type"
										]
									},
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"name": "Transaction_Type",
												"type": "String"
											},
											"sink": {
												"name": "Transaction_Type",
												"type": "String",
												"physicalType": "varchar"
											}
										},
										{
											"source": {
												"name": "Description",
												"type": "String"
											},
											"sink": {
												"name": "Description",
												"type": "String",
												"physicalType": "varchar"
											}
										},
										{
											"source": {
												"name": "Data_Type_Id",
												"type": "String"
											},
											"sink": {
												"name": "Data_Type_Id",
												"type": "String",
												"physicalType": "varchar"
											}
										},
										{
											"source": {
												"name": "last_updated",
												"type": "DateTime"
											},
											"sink": {
												"name": "last_updated",
												"type": "DateTime",
												"physicalType": "datetime"
											}
										}
									],
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "OperationalDB",
									"type": "DatasetReference",
									"parameters": {
										"ConnectionStringKey": {
											"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
											"type": "Expression"
										},
										"KeyVault_URL": {
											"value": "@pipeline().parameters.KeyVault_URL",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "StockledgerTransactionType_Staging",
									"type": "DatasetReference",
									"parameters": {
										"ConnectionStringKey": {
											"value": "@pipeline().parameters.StagingDBConnectionStringKey",
											"type": "Expression"
										},
										"KeyVault_URL": {
											"value": "@pipeline().parameters.KeyVault_URL",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "If New Supplier Data",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Check New Supplier Data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(activity('Check New Supplier Data').output.firstRow.ct,0)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Copy All Supplier Data",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "MySqlSource",
									"query": {
										"value": "select Supplier_Id,\n    Name,\n    Status,\n    Last_Updated\nfrom suppliers \nwhere last_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}'",
										"type": "Expression"
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "upsert",
									"upsertSettings": {
										"useTempDB": true,
										"keys": [
											"supplier_id"
										]
									},
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"name": "Supplier_Id",
												"type": "String"
											},
											"sink": {
												"name": "supplier_id",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "Name",
												"type": "String"
											},
											"sink": {
												"name": "name",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "Status",
												"type": "String"
											},
											"sink": {
												"name": "status",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "Last_Updated",
												"type": "DateTime"
											},
											"sink": {
												"name": "last_updated",
												"type": "DateTime",
												"physicalType": "datetime"
											}
										}
									],
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "OperationalDB",
									"type": "DatasetReference",
									"parameters": {
										"ConnectionStringKey": {
											"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
											"type": "Expression"
										},
										"KeyVault_URL": {
											"value": "@pipeline().parameters.KeyVault_URL",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "Supplier_Staging",
									"type": "DatasetReference",
									"parameters": {
										"KeyVault_URL": {
											"value": "@pipeline().parameters.KeyVault_URL",
											"type": "Expression"
										},
										"ConnectionStringKey": {
											"value": "@pipeline().parameters.StagingDBConnectionStringKey",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Check New Supplier Data",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Create Extract Log Entry",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "MySqlSource",
						"query": {
							"value": "select count(1) as ct \nfrom suppliers\nwhere last_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}'",
							"type": "Expression"
						}
					},
					"dataset": {
						"referenceName": "OperationalDB",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Update ExtractLog with Latest UpdateDate",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "If New StockLedgerTransaction Data",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "If New InventoryType Data",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "If New Supplier Data",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "If New Season Data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "Update_ExtractLog_Staging",
					"storedProcedureParameters": {
						"LogId": {
							"value": {
								"value": "@{activity('Create Extract Log Entry').output.firstRow.logRecord}",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"ExtractType": {
							"value": "InventoryDimension",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "EnactorDW",
					"type": "LinkedServiceReference",
					"parameters": {
						"ConnectionStringKey": {
							"value": "@pipeline().parameters.StagingDBConnectionStringKey",
							"type": "Expression"
						},
						"KeyVault_URL": {
							"value": "@pipeline().parameters.KeyVault_URL",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Check New Seasons Data",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Create Extract Log Entry",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "MySqlSource",
						"query": {
							"value": "select count(1) as ct \nfrom seasons\nwhere last_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}'",
							"type": "Expression"
						}
					},
					"dataset": {
						"referenceName": "OperationalDB",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "If New Season Data",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Check New Seasons Data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(activity('Check New Seasons Data').output.firstRow.ct,0)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Copy All Season Data",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "MySqlSource",
									"query": {
										"value": "select \n    Season_Id,\n    Description,\n    Start_Date,\n    End_Date,\n    Last_Updated \nfrom seasons \nwhere last_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}'\n",
										"type": "Expression"
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBehavior": "upsert",
									"upsertSettings": {
										"useTempDB": true,
										"keys": [
											"Season_Id"
										]
									},
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"name": "Season_Id",
												"type": "String"
											},
											"sink": {
												"name": "Season_Id",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "Description",
												"type": "String"
											},
											"sink": {
												"name": "Description",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "Start_Date",
												"type": "DateTime"
											},
											"sink": {
												"name": "Start_Date",
												"type": "DateTime",
												"physicalType": "datetime"
											}
										},
										{
											"source": {
												"name": "End_Date",
												"type": "DateTime"
											},
											"sink": {
												"name": "End_Date",
												"type": "DateTime",
												"physicalType": "datetime"
											}
										},
										{
											"source": {
												"name": "Last_Updated",
												"type": "DateTime"
											},
											"sink": {
												"name": "Last_Updated",
												"type": "DateTime",
												"physicalType": "datetime"
											}
										}
									],
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "OperationalDB",
									"type": "DatasetReference",
									"parameters": {
										"ConnectionStringKey": {
											"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
											"type": "Expression"
										},
										"KeyVault_URL": {
											"value": "@pipeline().parameters.KeyVault_URL",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "Season_Staging",
									"type": "DatasetReference",
									"parameters": {
										"ConnectionStringKey": {
											"value": "@pipeline().parameters.StagingDBConnectionStringKey",
											"type": "Expression"
										},
										"KeyVault_URL": {
											"value": "@pipeline().parameters.KeyVault_URL",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			}
		],
		"parameters": {
			"StagingDBConnectionStringKey": {
				"type": "string",
				"defaultValue": "EnactorBI-StagingDB-ConnectionString"
			},
			"OperationalDBConnectionStringKey": {
				"type": "string",
				"defaultValue": "Enactor-OperationalDB-ConnectionString"
			},
			"KeyVault_URL": {
				"type": "string",
				"defaultValue": "https://en-bi-kv-demo01.vault.azure.net/"
			}
		},
		"variables": {
			"LastExtractDate": {
				"type": "String"
			},
			"SupplierProduct Count": {
				"type": "String"
			}
		},
		"folder": {
			"name": "OperationalToStaging"
		},
		"annotations": [],
		"lastPublishTime": "2023-07-31T11:16:01Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}