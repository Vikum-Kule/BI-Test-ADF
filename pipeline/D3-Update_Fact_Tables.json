{
	"name": "D3-Update_Fact_Tables",
	"properties": {
		"activities": [
			{
				"name": "Lookup Previous Staging Extract Date",
				"description": "Get penultimate extract date from staging extract log",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select \nFORMAT(max(extractDateTime),'yyyy-MM-ddTHH:mm:ssZ') as LastSuccessfulExtractDate\nfrom extractlog\nwhere extractdatetime not in (\nselect max(extractDateTime) from extractlog\nwhere extracttype = 'ProductFlashSalesFact'\nand extractresult = 'Success')\nand extracttype = 'ProductFlashSalesFact'\nand extractresult = 'Success'",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Brand_Staging",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Create Update Log Entry",
				"description": "Insert record in UpdateLog; all datetimes are UTC",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set Last Update Date",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat('insert UpdateLog \nvalues(getdate(),''',formatDateTime(activity('Lookup Previous Staging Extract Date').output.firstRow.LastSuccessfulExtractDate,'yyyy-MM-dd HH:mm:ss'),''',\n''FlashSalesFact'',\n''Started'',\ngetdate());\nselect SCOPE_IDENTITY() as logRecord')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "FactFlashSales",
						"type": "DatasetReference",
						"parameters": {
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							},
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.DataWarehouseDBConnectionStringKey",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Set Last Update Date",
				"description": "Get Last Update datetime and convert to UTC (for use by ProductSales Update flow)",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup Previous Staging Extract Date",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "LastUpdateDate",
					"value": {
						"value": "@{convertFromUtc(activity('Lookup Previous Staging Extract Date').output.firstRow.LastSuccessfulExtractDate,'GMT Standard Time')}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Complete Update Log Entry",
				"description": "Set Extract Log Entry to Success",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "FlashSalesUpdateFromView",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "update updateLog \nset UpdateResult = 'Success',\nLastUpdatedDate = getdate()\nwhere logid = @{activity('Create Update Log Entry').output.firstRow.logRecord};\n\nselect 0 res",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "FactFlashSales",
						"type": "DatasetReference",
						"parameters": {
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							},
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.DataWarehouseDBConnectionStringKey",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "FlashSalesUpdateFromView",
				"type": "ExecuteDataFlow",
				"dependsOn": [
					{
						"activity": "Create Update Log Entry",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "1.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "FlashSalesUpdateFromView",
						"type": "DataFlowReference",
						"parameters": {
							"LastUpdatedDate": {
								"value": "'@{formatDateTime(variables('LastUpdateDate'),'yyyy-MM-dd HH:mm:ss')}'",
								"type": "Expression"
							}
						},
						"datasetParameters": {
							"FlashSalesStagingFull": {
								"ConnectionStringKey": {
									"value": "@pipeline().parameters.StagingDBConnectionStringKey",
									"type": "Expression"
								},
								"KeyVault_URL": {
									"value": "@pipeline().parameters.KeyVault_URL",
									"type": "Expression"
								}
							},
							"DimLocation": {
								"ConnectionStringKey": {
									"value": "@pipeline().parameters.DataWarehouseDBConnectionStringKey",
									"type": "Expression"
								},
								"KeyVault_URL": {
									"value": "@pipeline().parameters.KeyVault_URL",
									"type": "Expression"
								}
							},
							"DimMMG": {
								"ConnectionStringKey": {
									"value": "@pipeline().parameters.DataWarehouseDBConnectionStringKey",
									"type": "Expression"
								},
								"KeyVault_URL": {
									"value": "@pipeline().parameters.KeyVault_URL",
									"type": "Expression"
								}
							},
							"DimSalesperson": {
								"ConnectionStringKey": {
									"value": "@pipeline().parameters.DataWarehouseDBConnectionStringKey",
									"type": "Expression"
								},
								"KeyVault_URL": {
									"value": "@pipeline().parameters.KeyVault_URL",
									"type": "Expression"
								}
							},
							"DimHour": {
								"ConnectionStringKey": {
									"value": "@pipeline().parameters.DataWarehouseDBConnectionStringKey",
									"type": "Expression"
								},
								"KeyVault_URL": {
									"value": "@pipeline().parameters.KeyVault_URL",
									"type": "Expression"
								}
							},
							"DimDate": {
								"ConnectionStringKey": {
									"value": "@pipeline().parameters.DataWarehouseDBConnectionStringKey",
									"type": "Expression"
								},
								"KeyVault_URL": {
									"value": "@pipeline().parameters.KeyVault_URL",
									"type": "Expression"
								}
							},
							"DimCurrency": {
								"ConnectionStringKey": {
									"value": "@pipeline().parameters.DataWarehouseDBConnectionStringKey",
									"type": "Expression"
								},
								"KeyVault_URL": {
									"value": "@pipeline().parameters.KeyVault_URL",
									"type": "Expression"
								}
							},
							"DimTender": {
								"ConnectionStringKey": {
									"value": "@pipeline().parameters.DataWarehouseDBConnectionStringKey",
									"type": "Expression"
								},
								"KeyVault_URL": {
									"value": "@pipeline().parameters.KeyVault_URL",
									"type": "Expression"
								}
							},
							"DimPromotion": {
								"ConnectionStringKey": {
									"value": "@pipeline().parameters.DataWarehouseDBConnectionStringKey",
									"type": "Expression"
								},
								"KeyVault_URL": {
									"value": "@pipeline().parameters.KeyVault_URL",
									"type": "Expression"
								}
							},
							"WriteToFactFlashSalesTable": {
								"KeyVault_URL": {
									"value": "@pipeline().parameters.KeyVault_URL",
									"type": "Expression"
								},
								"ConnectionStringKey": {
									"value": "@pipeline().parameters.DataWarehouseDBConnectionStringKey",
									"type": "Expression"
								}
							}
						}
					},
					"compute": {
						"coreCount": 8,
						"computeType": "General"
					},
					"traceLevel": "Fine"
				}
			}
		],
		"parameters": {
			"StagingDBConnectionStringKey": {
				"type": "string",
				"defaultValue": "EnactorBI-StagingDB-ConnectionString"
			},
			"DataWarehouseDBConnectionStringKey": {
				"type": "string",
				"defaultValue": "EnactorBI-DataWarehouseDB-ConnectionString"
			},
			"KeyVault_URL": {
				"type": "string",
				"defaultValue": "https://PR-EVAL-BI-Key-Vault.vault.azure.net/"
			}
		},
		"variables": {
			"LastUpdateDate": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Flash_Sales_ETL_Pipelines/StagingToDW"
		},
		"annotations": [],
		"lastPublishTime": "2022-10-05T08:17:32Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}