{
	"name": "S6_Copy_ProductSales_Fact_To_Staging",
	"properties": {
		"activities": [
			{
				"name": "Lookup Last Extract Date",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select FORMAT(max(ExtractDateTime),'yyyy-MM-ddTHH:mm:ssZ') as LastSuccessfulExtractDate\nfrom ExtractLog \nwhere ExtractResult = 'Success'\nand ExtractType = 'ProductFlashSalesFact'\n",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "FlashSales_ProductSales_Staging",
						"type": "DatasetReference",
						"parameters": {
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							},
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Create Extract Log Entry",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set Last Extract Date",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "insert ExtractLog \nvalues(getdate(),'ProductFlashSalesFact','Started',getdate());\nselect SCOPE_IDENTITY() as logRecord\n",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "FlashSales_ProductSales_Staging",
						"type": "DatasetReference",
						"parameters": {
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							},
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Set Last Extract Date",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup Last Extract Date",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "LastExtractDate",
					"value": {
						"value": "@{convertFromUtc(activity('Lookup Last Extract Date').output.firstRow.LastSuccessfulExtractDate,'GMT Standard Time')}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Update Extract Log Entry - Success",
				"description": "Set Extract Log Entry to Success",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Update ExtractLog with Latest UpdateDate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "update ExtractLog \nset ExtractResult = 'Success',\nLastUpdatedDate = getdate()\nwhere logid = @{activity('Create Extract Log Entry').output.firstRow.logRecord};\n\nselect 0 res",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "FlashSales_ProductSales_Staging",
						"type": "DatasetReference",
						"parameters": {
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							},
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Update Extract Log Entry - Error",
				"description": "Set Extract Log Entry to Error",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Copy Product Sales Table",
						"dependencyConditions": [
							"Failed"
						]
					},
					{
						"activity": "Copy Tender Transactions",
						"dependencyConditions": [
							"Failed"
						]
					},
					{
						"activity": "Copy Retail Transactions",
						"dependencyConditions": [
							"Failed"
						]
					},
					{
						"activity": "Update ExtractLog with Latest UpdateDate",
						"dependencyConditions": [
							"Failed"
						]
					},
					{
						"activity": "Copy Promotion Triggers",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "update ExtractLog \nset ExtractResult = 'Error',\nLastUpdatedDate = getdate()\nwhere logid = @{activity('Create Extract Log Entry').output.firstRow.logRecord};\n\nselect 0 res",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "FlashSales_ProductSales_Staging",
						"type": "DatasetReference",
						"parameters": {
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							},
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Copy Product Sales Table",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Create Extract Log Entry",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "MySqlSource",
						"query": {
							"value": "select \n\ttransaction_key,\n  line_number,\n  ifnull(upper(ps.product_id),'unk') as product_id,\n  case when isnull(ps.MMGroup_Id) then 'unk' when ps.MMGroup_Id = '-' then 'unk' else upper(Concat(ps.MMGroup_Hierarchy_Id,'/',ps.MMGroup_Id)) end as MMGroupKey,\n  case when isnull(p.Brand_Id) then 'unk' when p.Brand_Id = '-' then 'unk' else upper(Concat(p.Brand_Hierarchy_Id,'/',replace(p.Brand_Id,' ','_'))) end as BrandKey,\n\tcase when Salesperson_Id = '-' then ifnull(upper(User_Id),'unk') else Salesperson_Id end Salesperson,\n  ifnull(upper(User_Id),'unk') as User_id,\n  tax_rate_id,\n  convert(tax_value,DECIMAL(13,2))/100 tax_value,\n  convert(Sales_Value,DECIMAL(13,2))/100 SalesValue,\n  convert(Orders_Value,DECIMAL(13,2))/100 OrdersValue,\n  convert(Returns_Value,DECIMAL(13,2))/100 ReturnsValue,\n  convert(Promotions_Value,DECIMAL(13,2))/100 PromoValue,\n  convert(Discounts_Value,DECIMAL(13,2))/100 ManualDiscValue,\n  convert(Price_Overrides_Value,DECIMAL(13,2))/100 PriceOverridesValue,\n\tSales_Quantity,\n\tOrders_Quantity,\n\tReturns_Quantity,\n\tps.last_updated\nfrom\n  productsales ps\nleft join\n  products p\non\n  p.product_id = ps.product_id\nwhere\n  ps.last_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}'\n",
							"type": "Expression"
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "transaction_key",
									"type": "String"
								},
								"sink": {
									"name": "transaction_key",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "line_number",
									"type": "Int32"
								},
								"sink": {
									"name": "line_number",
									"type": "Int32"
								}
							},
							{
								"source": {
									"name": "product_id",
									"type": "String"
								},
								"sink": {
									"name": "product_id",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "MMGroupKey",
									"type": "String"
								},
								"sink": {
									"name": "MMGroupKey",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "BrandKey",
									"type": "String"
								},
								"sink": {
									"name": "BrandKey",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "Salesperson",
									"type": "String"
								},
								"sink": {
									"name": "Salesperson",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "User_id",
									"type": "String"
								},
								"sink": {
									"name": "User_id",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "tax_rate_id",
									"type": "String"
								},
								"sink": {
									"name": "tax_rate_id",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "SalesValue",
									"type": "Decimal"
								},
								"sink": {
									"name": "SalesValue",
									"type": "Decimal"
								}
							},
							{
								"source": {
									"name": "OrdersValue",
									"type": "Decimal"
								},
								"sink": {
									"name": "OrdersValue",
									"type": "Decimal"
								}
							},
							{
								"source": {
									"name": "ReturnsValue",
									"type": "Decimal"
								},
								"sink": {
									"name": "ReturnsValue",
									"type": "Decimal"
								}
							},
							{
								"source": {
									"name": "PromoValue",
									"type": "Decimal"
								},
								"sink": {
									"name": "PromoValue",
									"type": "Decimal"
								}
							},
							{
								"source": {
									"name": "ManualDiscValue",
									"type": "Decimal"
								},
								"sink": {
									"name": "ManualDiscValue",
									"type": "Decimal"
								}
							},
							{
								"source": {
									"name": "PriceOverridesValue",
									"type": "Decimal"
								},
								"sink": {
									"name": "PriceOverridesValue",
									"type": "Decimal"
								}
							},
							{
								"source": {
									"name": "tax_value",
									"type": "Decimal"
								},
								"sink": {
									"name": "tax_value",
									"type": "Decimal"
								}
							},
							{
								"source": {
									"name": "Sales_Quantity",
									"type": "Double"
								},
								"sink": {
									"name": "Sales_Quantity",
									"type": "Double"
								}
							},
							{
								"source": {
									"name": "Orders_Quantity",
									"type": "Double"
								},
								"sink": {
									"name": "Orders_Quantity",
									"type": "Double"
								}
							},
							{
								"source": {
									"name": "Returns_Quantity",
									"type": "Double"
								},
								"sink": {
									"name": "Returns_Quantity",
									"type": "Double"
								}
							},
							{
								"source": {
									"name": "last_updated",
									"type": "DateTime"
								},
								"sink": {
									"name": "last_updated",
									"type": "DateTime"
								}
							}
						]
					}
				},
				"inputs": [
					{
						"referenceName": "OperationalDB",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "FlashSales_ProductSales_Staging",
						"type": "DatasetReference",
						"parameters": {
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							},
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Copy Retail Transactions",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Create Extract Log Entry",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "MySqlSource",
						"query": {
							"value": "select\n\ttransaction_key,\n    transaction_Id,\n\ttransaction_number,\n    terminal_number,\n    ifnull(device_id,'unk') as device_id,\n    ifnull(location_id,'unk') as location_id,\n    ifnull(application_id,'unk') as application_id,\n    ifnull(base_currency_id,'unk') as base_currency_id,\n    completed_date_time,\n\tconvert(Completed_Date_Time,date) as TradeDate,\n    completed_trading_day Trading_Day,\n    completed_trading_year Trading_Year,\n    last_updated\nfrom\n\tretailtransactionids\nwhere\n\tlast_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}' ",
							"type": "Expression"
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "transaction_key",
									"type": "String"
								},
								"sink": {
									"name": "transaction_key",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "transaction_Id",
									"type": "String"
								},
								"sink": {
									"name": "transaction_Id",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "transaction_number",
									"type": "Int64"
								},
								"sink": {
									"name": "transaction_number",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"name": "terminal_number",
									"type": "Int64"
								},
								"sink": {
									"name": "terminal_number",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"name": "device_id",
									"type": "String"
								},
								"sink": {
									"name": "device_id",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "location_id",
									"type": "String"
								},
								"sink": {
									"name": "location_id",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "application_id",
									"type": "String"
								},
								"sink": {
									"name": "application_id",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "base_currency_id",
									"type": "String"
								},
								"sink": {
									"name": "base_currency_id",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "completed_date_time",
									"type": "DateTime"
								},
								"sink": {
									"name": "completed_date_time",
									"type": "DateTime",
									"physicalType": "datetime"
								}
							},
							{
								"source": {
									"name": "TradeDate",
									"type": "DateTime"
								},
								"sink": {
									"name": "TradeDate",
									"type": "DateTime",
									"physicalType": "date"
								}
							},
							{
								"source": {
									"name": "Trading_Day",
									"type": "Int32"
								},
								"sink": {
									"name": "Trading_Day",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "Trading_Year",
									"type": "Int32"
								},
								"sink": {
									"name": "Trading_Year",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "last_updated",
									"type": "DateTime"
								},
								"sink": {
									"name": "last_updated",
									"type": "DateTime",
									"physicalType": "datetime"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "OperationalDB",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "FlashSales_RetailTransactions_Staging",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Copy Tender Transactions",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Create Extract Log Entry",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "MySqlSource",
						"query": {
							"value": "select\n\ttransaction_key,\n    line_number,\n    Upper(tender_id) as tender_id,\n    Upper(Concat(tender_group_hierarchy_id,'/',tender_group_id)) as RegionKey,\n    tender_type,\n    ifnull(currency_id,'unk') as currency_id,\n    convert(base_value,DECIMAL(13,2))/100 base_value,\n    convert(value,DECIMAL(13,2))/100 value,\n\texchange_rate,\n    is_change,\n    case when isnull(user_id) then 'unk' when user_id = '-' then 'unk' else user_id end as user_id,\n    case when isnull(authorising_user_id) then 'unk' when authorising_user_id = '-' then 'unk' else authorising_user_id end as authorising_user_id,\n\tlast_updated\nfrom\n\ttendertransactions\nwhere\n\tlast_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}'",
							"type": "Expression"
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "transaction_key",
									"type": "String"
								},
								"sink": {
									"name": "transaction_key",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "line_number",
									"type": "Int32"
								},
								"sink": {
									"name": "line_number",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "tender_id",
									"type": "String"
								},
								"sink": {
									"name": "Tender_id",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "RegionKey",
									"type": "String"
								},
								"sink": {
									"name": "RegionKey",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "currency_id",
									"type": "String"
								},
								"sink": {
									"name": "currency_id",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "base_value",
									"type": "Decimal"
								},
								"sink": {
									"name": "base_value",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 6,
									"precision": 17
								}
							},
							{
								"source": {
									"name": "value",
									"type": "Decimal"
								},
								"sink": {
									"name": "value",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 6,
									"precision": 17
								}
							},
							{
								"source": {
									"name": "exchange_rate",
									"type": "Double"
								},
								"sink": {
									"name": "exchange_rate",
									"type": "Double",
									"physicalType": "float"
								}
							},
							{
								"source": {
									"name": "is_change",
									"type": "Int16"
								},
								"sink": {
									"name": "is_change",
									"type": "Byte",
									"physicalType": "tinyint"
								}
							},
							{
								"source": {
									"name": "user_id",
									"type": "String"
								},
								"sink": {
									"name": "user_id",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "authorising_user_id",
									"type": "String"
								},
								"sink": {
									"name": "authorising_user_id",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "last_updated",
									"type": "DateTime"
								},
								"sink": {
									"name": "last_updated",
									"type": "DateTime",
									"physicalType": "datetime"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "OperationalDB",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "FlashSales_TenderTransactions_Staging",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Update ExtractLog with Latest UpdateDate",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy Retail Transactions",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Copy Tender Transactions",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Copy Product Sales Table",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Copy Promotion Triggers",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "Update_ExtractLog_Staging",
					"storedProcedureParameters": {
						"LogId": {
							"value": {
								"value": "@{activity('Create Extract Log Entry').output.firstRow.logRecord}",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"ExtractType": {
							"value": "ProductFlashSalesFact",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "EnactorDW_Staging",
					"type": "LinkedServiceReference",
					"parameters": {
						"ConnectionStringKey": {
							"value": "@pipeline().parameters.StagingDBConnectionStringKey",
							"type": "Expression"
						},
						"KeyVault_URL": {
							"value": "@pipeline().parameters.KeyVault_URL",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Copy Promotion Triggers",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Create Extract Log Entry",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "MySqlSource",
						"query": {
							"value": "select\n\ttransaction_key,\n    line_number,\n    trigger_number,\n    upper(promotion_id) as promotion_id,\n    upper(concat(promotion_group_hierarchy_id,'/', promotion_group_id )) as regionKey,\n    reward_type,\n    convert(reward_value,DECIMAL(13,2))/100 reward_value,\n    convert(distributed_reward_value,DECIMAL(13,2))/100 distributed_reward_value,\n    quantity,\n\tlast_updated\nfrom\n\tpromotiontriggers\nwhere\n\tlast_updated > '@{formatDateTime(variables('LastExtractDate'),'yyyy-MM-dd HH:mm:ss')}'",
							"type": "Expression"
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "transaction_key",
									"type": "String"
								},
								"sink": {
									"name": "transaction_key",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "line_number",
									"type": "Int32"
								},
								"sink": {
									"name": "line_number",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "trigger_number",
									"type": "Int32"
								},
								"sink": {
									"name": "trigger_number",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "promotion_id",
									"type": "String"
								},
								"sink": {
									"name": "promotion_id",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "regionKey",
									"type": "String"
								},
								"sink": {
									"name": "regionKey",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "reward_type",
									"type": "String"
								},
								"sink": {
									"name": "reward_type",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "reward_value",
									"type": "Decimal"
								},
								"sink": {
									"name": "reward_value",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 6,
									"precision": 17
								}
							},
							{
								"source": {
									"name": "distributed_reward_value",
									"type": "Decimal"
								},
								"sink": {
									"name": "distributed_reward_value",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 6,
									"precision": 17
								}
							},
							{
								"source": {
									"name": "quantity",
									"type": "Double"
								},
								"sink": {
									"name": "quantity",
									"type": "Double",
									"physicalType": "float"
								}
							},
							{
								"source": {
									"name": "last_updated",
									"type": "DateTime"
								},
								"sink": {
									"name": "last_updated",
									"type": "DateTime",
									"physicalType": "datetime"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "OperationalDB",
						"type": "DatasetReference",
						"parameters": {
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.OperationalDBConnectionStringKey",
								"type": "Expression"
							},
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "FlashSales_PromotionTriggers_Staging",
						"type": "DatasetReference",
						"parameters": {
							"KeyVault_URL": {
								"value": "@pipeline().parameters.KeyVault_URL",
								"type": "Expression"
							},
							"ConnectionStringKey": {
								"value": "@pipeline().parameters.StagingDBConnectionStringKey",
								"type": "Expression"
							}
						}
					}
				]
			}
		],
		"parameters": {
			"KeyVault_URL": {
				"type": "string",
				"defaultValue": "https://PR-EVAL-BI-Key-Vault.vault.azure.net/"
			},
			"OperationalDBConnectionStringKey": {
				"type": "string",
				"defaultValue": "Enactor-OperationalDB-ConnectionString"
			},
			"StagingDBConnectionStringKey": {
				"type": "string",
				"defaultValue": "EnactorBI-StagingDB-ConnectionString"
			}
		},
		"variables": {
			"LastExtractDate": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Flash_Sales_ETL_Pipelines/OperationalToStaging"
		},
		"annotations": []
	}
}